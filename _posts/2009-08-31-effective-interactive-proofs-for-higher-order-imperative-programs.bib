---
layout: publication
category: publication
title: Effective interactive proofs for higher-order imperative programs
authors: Adam Chlipala, Gregory Malecha, Greg Morrisett, Avraham Shinnar, Ryan Wisnesky
abstract: |
  We present a new approach for constructing and verifying higher-order, imperative programs using the Coq proof assistant. We build on the past work on the Ynot system, which is based on Hoare Type Theory. That original system was a proof of concept, where every program verification was accomplished via laborious manual proofs, with much code devoted to uninteresting low-level details. In this paper, we present a re-implementation of Ynot which makes it possible to implement fully-verified, higher-order imperative programs with reasonable proof burden. At the same time, our new system is implemented entirely in Coq source files, showcasing the versatility of that proof assistant as a platform for research on language design and verification. Both versions of the system have been evaluated with case studies in the verification of imperative data structures, such as hash tables with higher-order iterators. The verification burden in our new system is reduced by at least an order of magnitude compared to the old system, by replacing manual proof with automation. The core of the automation is a simplification procedure for implications in higher-order separation logic, with hooks that allow programmers to add domain-specific simplification rules.

  We argue for the effectiveness of our infrastructure by verifying a number of data structures and a packrat parser, and we compare to similar efforts within other projects. Compared to competing approaches to data structure verification, our system includes much less code that must be trusted; namely, about a hundred lines of Coq code defining a program logic. All of our theorems and decision procedures have or build machine-checkable correctness proofs from first principles, removing opportunities for tool bugs to create faulty verifications.
links:
- download: http://ynot.cs.harvard.edu/papers/icfp09.pdf
- publisher's link: http://portal.acm.org/citation.cfm?id=1631687.1596565
tags:
- ynot
- separation logic
- coq
- verification
---
@article{Malecha201195,
  title = "Trace-based verification of imperative programs with I/O ",
  journal = "Journal of Symbolic Computation",
  volume = "46",
  number = "2",
  pages = "95 - 118",
  year = "2011",
  note = "Automated Specification and Verification of Web Systems ",
  issn = "0747-7171",
  doi = "http://dx.doi.org/10.1016/j.jsc.2010.08.004",
  url = "http://www.sciencedirect.com/science/article/pii/S0747717110001343",
  author = "Gregory Malecha and Greg Morrisett and Ryan Wisnesky",
  keywords = "Program verification",
  keywords = "Separation logic",
  keywords = "Dependent types",
  keywords = "Traces",
  keywords = "Imperative programming",
  keywords = "Ynot ",
  abstract = "In this paper we demonstrate how to prove the correctness of systems implemented using low-level imperative features like pointers, files, and socket I/O with respect to high level I/O protocol descriptions by using the Coq proof assistant. We present a web-based course gradebook application developed with Ynot, a Coq library for verified imperative programming. We add a dialog-based I/O system to Ynot, and we extend Ynotâ€™s underlying Hoare logic with event traces to reason about I/O and protocol behavior. Expressive abstractions allow the modular verification of both high level specifications like privacy guarantees and low level properties like data structure pointer invariants."
}
